name: ci

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  
  check_version:
    name: Tag version bump 
    runs-on: ubuntu-latest
    # run only on pushes, not PRs
    if: ${{ github.event_name == 'push' && github.base_ref == null }}
    outputs:
      should_publish: ${{ steps.check.outputs.result }} 
    steps:
    - uses: actions/setup-node@v2
      with:
        node-version: 14
    - run: npm install toml@3.0.0
    - id: check
      uses: actions/github-script@v5
      with:
        script: |
          const toml = require('toml')
          async function getVersion(ref) {
            console.log(github);
            try {
              response = await github.repos.getContent({
                repo: context.repo.repo,
                owner: context.repo.owner,
                path: 'pyproject.toml',
                ref: ref
              });
              return toml.parse(Buffer.from(response.data.content, 'base64').toString())
                .tool
                .poetry
                .version;
            } catch (exc) {
              /*if (exc instanceof RequestError && exc.status == 404) {
                return null;
              } else {
                throw exc;
              }*/
              throw exc;
            }
          }
          after = await getVersion(context.payload.after);
          ref = `refs/tags/v${after}`
          is_main = context.payload.ref === `refs/heads/${context.payload.repository.default_branch}`

          // a tag matching the version was just pushed
          let release = context.payload.ref == ref;
          if (release) {
            console.log(`Tag v${after} pushed (${context.sha})`);
          }
          // the version on the default branch changed; create a tag
          if (!release && is_main) {
            before = await getVersion(context.payload.before);
            if (before !== after) {
              console.log(`Version bumped: ${before} -> ${after}`);
              try {
                await github.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref,
                  sha: context.sha
                });
                console.log(`Tag v${after} created (${context.sha})`);
                release = true;
              } catch (exc) {
                // tag already existed
                /*if (exc instanceof RequestError && exc.status == 422) {
                  console.log(`Skipping publish (tag v${after} already exists)`);
                  release = false;
                } else {
                  throw exc;
                }*/
                throw exc;
              }
            } else {
              console.log(`Skipping publish (version is still ${before})`);
            }
          } else if (!is_main) {
            console.log(`Skipping publish (push to ${context.payload.ref} != refs/heads/${context.payload.repository.default_branch})`);
          }
          return release;

  pypi:
    runs-on: ubuntu-latest
    needs: [check_version]
    if: ${{ fromJSON(needs.check_version.outputs.should_publish) }}

    steps:
    - name: Dump ref
      run: echo ${{ needs.check_version.outputs.should_publish }}
    - name: do not release
      if: ${{ !fromJSON(needs.check_version.outputs.should_publish) }}
      run: echo "did not release"
    - name: do release
      if: ${{ fromJSON(needs.check_version.outputs.should_publish) }}
      run: echo "did release"
  
