name: ci

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  
  pypi:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && ( contains(github.ref, '/tags/v') || contains(github.ref, 'refs/heads/main') ) }}


    steps:
    - uses: actions/setup-node@v2
      with:
        node-version: 14
    - run: npm install toml
    - name: Get commit range
      id: commits
      uses: actions/github-script@v4
      with:
        github-token: ${{ github.token }}
        debug: true
        script: |
          const toml = require('toml')
          console.log(context.payload.commits);
          console.log(context);
          async function getVersion(ref) {
            response = await github.repos.getContent({
              repo: context.repo.repo,
              owner: context.repo.owner,
              path: 'pyproject.toml',
              ref: ref
            });
            let header_found = false;
            console.log(response.data);
            const pyproject = toml.parse(new Buffer(response.data.content, 'base64').toString());
            console.log(pyproject);
            return null;
          }

          before = await getVersion(content.payload.before);

          console.log(content.payload.before, before);

          return context.payload.commits.length+1
    - uses: actions/checkout@v2
      with:
        fetch-depth: ${{ steps.commits.outputs.result }}
    # Check if one of commits in context bumped the version
    - name: Check for version bump
      id: check
      run: |
        echo Checking last $((${{ steps.commits.outputs.result }}-1)) commits
        poetry_version() { awk '/^\s*$/{f=0};f{if ($1=="version") {gsub(/"/, "", $3); print($3)}};/\[tool\.poetry\]/{f=1}'; }
        echo "::set-output name=previous::$(git show HEAD~$((${{ steps.commits.outputs.result }}-1)):pyproject.toml | poetry_version)"
        echo "::set-output name=current::$(git show HEAD:pyproject.toml | poetry_version)"
    - name: Dump ref
      run: echo ${{ steps.check.outputs.previous }}->${{ steps.check.outputs.current }}